// _buttons.scss - Button component styles
// Separate styles for text and circle button engines
// Created: 10-Jun-2025

// ==============================================
// Shared Button Variables
// ==============================================
:root {
  // Active state colors (shared by both button types)
  --active-button-start: #6B46C1;
  --active-button-end: #2563EB;
}

// ==============================================
// Text Button Component
// ==============================================

// Container
.text-button-container {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: var(--component-spacing) 0;
  border: 1px solid yellow; // Debug border to match sliders
}

// Main component
.text-button-component {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: 9999px;
  cursor: pointer;
  overflow: visible; // Allow borders to animate outside
  transition: all 0.3s ease;
  z-index: 0;
  height: auto; // Let content determine height
  background: linear-gradient(-25deg, var(--light-slider-start) 0%, var(--light-slider-end) 100%);
  
  // Prevent text selection
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  
  // Dark theme support
  body[data-theme="dark"] & {
    background: linear-gradient(-25deg, var(--dark-slider-start) 0%, var(--dark-slider-end) 100%);
  }
  
  // Border container for animations
  .border-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
    clip-path: inset(0 0 0 0 round 9999px);
  }
  
  // Active state
  &.active {
    background: linear-gradient(145deg, var(--active-button-start), var(--active-button-end));
  }
  
  // Higher specificity for active state
  body[data-theme="light"] &.active,
  body[data-theme="dark"] &.active {
    background: linear-gradient(145deg, var(--active-button-start), var(--active-button-end));
  }
  
  // Disabled state
  &.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    
    &:active {
      transform: none;
    }
    
    .border-segment {
      opacity: 0 !important;
    }
  }
  
  // Click feedback
  &:active:not(.disabled) {
    transform: scale(0.98);
  }
}

// Text button content
.text-button-content {
  position: relative;
  z-index: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: var(--component-content-padding); // Standardized padding
  
  h3 {
    font-size: var(--component-font-size);
    font-weight: var(--component-font-weight);
    font-family: var(--font-family-primary);
    color: var(--text-color-dark);
    margin: 0;
    padding: 0;
    white-space: nowrap;
    overflow: visible;
    text-overflow: clip;
    max-width: none;
    transition: color 0.3s ease;
  }
}

// Active state text color
.text-button-component.active .text-button-content h3 {
  color: #ffffff;
}

// Border segments for text buttons
.text-button-component .border-segment {
  position: absolute;
  background: linear-gradient(
    to right,
    var(--active-button-start),
    var(--active-button-end)
  );
  opacity: 1;
  transition: transform 0.8s cubic-bezier(0.1, 0.8, 0.2, 1);
  height: 1px;
  width: 100px; // Default width, will be set in JS
}

.text-button-component .border-top {
  top: 0;
}

.text-button-component .border-bottom {
  bottom: 0;
}

// ==============================================
// Circle Button Component
// ==============================================

// Container
.circle-button-container {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: var(--component-spacing) 0;
  border: 1px solid yellow; // Debug border to match sliders
}

// Main component
.circle-button-component {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%; // Perfect circle
  cursor: pointer;
  overflow: visible;
  transition: all 0.3s ease;
  z-index: 0;
  background: linear-gradient(-25deg, var(--light-slider-start) 0%, var(--light-slider-end) 100%);
  
  // Prevent text selection
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  
  // Dark theme support
  body[data-theme="dark"] & {
    background: linear-gradient(-25deg, var(--dark-slider-start) 0%, var(--dark-slider-end) 100%);
  }
  
  // Gradient ring hover element
  .hover-ring {
    position: absolute;
    inset: -1px;
    border-radius: 50%;
    background: linear-gradient(145deg, var(--active-button-start), var(--active-button-end));
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    z-index: -1;
    
    // Inner mask to create ring effect - must match button background
    &::after {
      content: '';
      position: absolute;
      inset: 1px;
      border-radius: 50%;
      background: inherit; // Use parent's background first
    }
  }
  
  // Light theme: mask needs light gradient
  body[data-theme="light"] & .hover-ring::after {
    background: linear-gradient(-25deg, var(--light-slider-start) 0%, var(--light-slider-end) 100%);
  }
  
  // Dark theme: mask needs dark gradient  
  body[data-theme="dark"] & .hover-ring::after {
    background: linear-gradient(-25deg, var(--dark-slider-start) 0%, var(--dark-slider-end) 100%);
  }
  
  // Show ring on hover (but not when active)
  &.hover-ring-active:not(.active) .hover-ring {
    opacity: 1;
  }
  
  // Active state
  &.active {
    background: linear-gradient(145deg, var(--active-button-start), var(--active-button-end));
  }
  
  // Higher specificity for active state
  body[data-theme="light"] &.active,
  body[data-theme="dark"] &.active {
    background: linear-gradient(145deg, var(--active-button-start), var(--active-button-end));
  }
  
  // Disabled state
  &.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    
    &:active {
      transform: none;
    }
    
    .hover-ring {
      display: none;
    }
  }
  
  // Click feedback
  &:active:not(.disabled) {
    transform: scale(0.98);
  }
}

// Circle button content
.circle-button-content {
  position: relative;
  z-index: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2px 2px; // Minimal padding for circle
  
  h3 {
    font-size: var(--component-font-size);
    font-weight: var(--component-font-weight);
    font-family: var(--font-family-primary);
    color: var(--text-color-dark);
    margin: 0;
    padding: 0;
    opacity: 0; // Default dot is invisible
    transition: color 0.3s ease;
  }
}

// Active state text color
.circle-button-component.active .circle-button-content h3 {
  color: #ffffff;
}

// ==============================================
// Base Button Component Engine (Unified)
// ==============================================
// Styles for the unified button_component_engine that handles both text and circle modes

.button-container {
  display: inline-flex; // Changed to inline-flex to fit content width
  justify-content: center;
  align-items: center;
  margin: var(--component-spacing) 0;
  border: 1px solid yellow; // Debug border - remove for production
}

.button-component {
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: 9999px;
  cursor: pointer;
  overflow: visible;
  transition: all 0.3s ease;
  z-index: 0;
  background: linear-gradient(
    -25deg,
    var(--light-slider-start) 0%,
    var(--light-slider-end) 100%
  );
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

body[data-theme="dark"] .button-component {
  background: linear-gradient(
    -25deg,
    var(--dark-slider-start) 0%,
    var(--dark-slider-end) 100%
  );
}

// Text mode - wider button
.button-component.button-text {
  height: auto;
  min-width: auto;
}

// Circle mode - force circular shape with proper sizing
.button-component.button-circle {
  border-radius: 50%;
  width: auto;
  height: auto;
  aspect-ratio: 1;
  
  // Use minimal padding like circle engine
  .button-content {
    padding: 2px 2px; // Minimal padding for circle
  }
  
  // Hide the dot text (invisible like circle engine)
  .button-content h3 {
    opacity: 0; // Default dot is invisible - button shape is the visual element
  }
  
  // Hide border container and segments for circle mode
  .border-container {
    display: none;
  }
  
  .border-segment {
    display: none;
  }
}

// Border container for text mode animations
.button-component .border-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
  clip-path: inset(0 0 0 0 round 9999px);
}

// Active state
.button-component.active {
  background: linear-gradient(
    145deg,
    var(--active-button-start),
    var(--active-button-end)
  );
}

body[data-theme="light"] .button-component.active,
body[data-theme="dark"] .button-component.active {
  background: linear-gradient(
    145deg,
    var(--active-button-start),
    var(--active-button-end)
  );
}

// Disabled state
.button-component.disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.button-component.disabled:active {
  transform: none;
}

// Press animation
.button-component:active:not(.disabled) {
  transform: scale(0.98);
}

// Button content
.button-content {
  position: relative;
  z-index: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: var(--component-content-padding);
}

.button-content h3 {
  font-size: var(--component-font-size);
  font-weight: var(--component-font-weight);
  font-family: var(--font-family-primary);
  color: var(--text-color-dark);
  margin: 0;
  padding: 0;
  white-space: nowrap;
  overflow: visible;
  text-overflow: clip;
  max-width: none;
  transition: color 0.3s ease;
}

.button-component.active .button-content h3 {
  color: #ffffff;
}

// Border segments for text mode (sliding animation)
.button-component .border-segment {
  position: absolute;
  background: linear-gradient(
    to right,
    var(--active-button-start),
    var(--active-button-end)
  );
  opacity: 1;
  transition: transform 0.8s cubic-bezier(0.1, 0.8, 0.2, 1);
  height: 1px;
  width: 100px;
}

.button-component .border-top {
  top: 0;
}

.button-component .border-bottom {
  bottom: 0;
}

// Hover ring for circle mode (default dot)
.button-component .hover-ring {
  position: absolute;
  inset: -1px;
  border-radius: 50%;
  background: linear-gradient(
    145deg,
    var(--active-button-start),
    var(--active-button-end)
  );
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
  z-index: -1;
}

.button-component .hover-ring::after {
  content: "";
  position: absolute;
  inset: 1px;
  border-radius: 50%;
  background: inherit;
}

body[data-theme="light"] .button-component .hover-ring::after {
  background: linear-gradient(
    -25deg,
    var(--light-slider-start) 0%,
    var(--light-slider-end) 100%
  );
}

body[data-theme="dark"] .button-component .hover-ring::after {
  background: linear-gradient(
    -25deg,
    var(--dark-slider-start) 0%,
    var(--dark-slider-end) 100%
  );
}

// Show hover ring when active
.button-component.hover-ring-active:not(.active) .hover-ring {
  opacity: 1;
}

// Hide hover ring for disabled buttons
.button-component.disabled .hover-ring {
  display: none;
}

// Hide border segments for disabled buttons
.button-component.disabled .border-segment {
  opacity: 0 !important;
}
